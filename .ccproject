<!-- 
    Project file that is required by CaptainCasa toolset.
    
    Parameters, that are not listed within the template:

    webcontentdirectory - the directory in which .jsp files are stored
    by the layout editor. At the same time: the base directory that
    is used for deployment - if not overridden by parameter
    "webcontentdeployfromdirectory"
    
    webcontentdeployfromdirectory - by default a reloading
    of a web application within the layout editor copies all the content
    of *webcontentdirectory* to *webcontentdeploydirectory*. In some
    cases you want to explicitly define a directory which is used
    as copy source for the reloading, that is different to *webcontentdirectory*.

    javasourcedirectory - the project directory in which the Java-UI sources
    are kept. This is the directory into which code will be generated by the 
    CaptainCasa toolkit. If not defined this is the src-directory within
    the project directory.
    
    propertyfilesdirectory - the project directory in which properties-files
    are kept (multi language management). If not defined this is the
    source directory (javasourcedirectory).
    
    javasourcewebinfdirectory - this is the directory of sources which are
    compiled to WEB-INF classes - also in case of using hot deployment.
    
    javaclassdirectory - the project directory in which the IDE compiles
    the sources during programming

    javasourceencoding - by default the server VMs default
    character set is used for reading/writing java soruce files
    within the code generator. You can override this - depending
    on the encoding that you use inside your development environment
    (e.g. the one you use in Eclipse).
    
    copywebappignore - semicolon separated list of file names to
    be ignored during copying. e.g. ".svn;.cvs". The ignoring
    is done both on file and on directory level. A file is ignored
    when it contains one of the ignore strings.
    
    previewbgpaint - bgpaint command that serves as background
    for the preview zone of the layout editor, e.g.
    "rectangle(0,0,100%,100%,#F0F0F0,#C0C0C0,vertical)"
    
    checkforupdatedfiles - definition if the layout editor should
    check regularly (by timer) if jsp-files were changed on file
    system level while editing in the layout editor. If changes
    are found then the user will be asked if to take over the file
    from the file system. Default is "true".
    
    commandlinefilenotwriteable - command line that is executed if the
    file to be written is not writeable. The sequence @@absfile@@ within the
    command line will be replaced by the absolute file name of the file
    that is just to be written. The sequence @@relfile" within the command
    line will be replaced yb the relative file (relative from point of
    view of webcontent directory).
    
    classpathextension - semicolon separated list of directories or jar-
    files that are appended to the class path of this project. The classpath
    is used within the bean browser in order to reflect the managed bean classes.
    Example: "c:/temp/classes;c:temp/lib/xxx.jar;c:/temp/addlibs/*.jar".
    You can use "/*.jar" in order to indicate that all libraries of a certain
    folder need to be included.
    
    cleanallowed - boolean attribute that defines if the function clear-and-reload
    is avaiable in the project or not. By default the value is "true",
    define "false" for switching this function off. Switching off makes sense for
    projects that deploy into an other project's runtime.
    
    allowversionupdatebytoolset - boolean attribute that defines it the CaptainCasa
    toolset is allowed to update the project's version. Default is "true". -
    If you have own ways (e.g. ANT scripts) for updating a project's version
    then specify "false".
    
    beanbrowserclassloader - The classloader to be used within the BeanBrowser
    processing. By default a classloader of type URLClassLoader is used. You may
    define "org.eclnt.editor.CopyingClassLoader" to be used: this classloader
    copies all jar files into a separate directory and then uses the copies. 
    Advantage: no blocking of the JAR files of the application - disadvantage:
    quite some copying...
    
    All directory parameters either are full absolute directory paths 
    or may be defined relative to the project directory by prepending
    "${project}" or may be defined relative to the deployment directory
    (webcontentdeploydirectory) by prepending "${projectdeploy}".
    
    You may use the value of environment variables by defining "${env.<varName>}".
    You may use the value system properties by defining "${sys.<varName>}".
 -->

<project 
    
    webcontentdirectory="${project}/webcontent"
    javasourcedirectory="${project}/src"
    
    javaclassdirectory="${project}/webcontentbuild/WEB-INF/classes"
    
    webappaddonsdirectory="${project}/webcontentcc"
    
    webcontentdeploydirectory="${deploytomcatwebappsdir}/cc_workshop1"
    webcontextroot           ="cc_workshop1"
    webhostport              ="localhost:50000"
    
    copywebapp  ="true"
    reloadwebapp="true"
    >

    <!--
        Packages that are copied according to hot deployment rules. 
    -->
    <!--
        <hotdeploymentpackage name="com.abc.def"/>
        <hotdeploymentpackage name="com.ghi.jkl"/>
     -->
    <hotdeploymentpackage name="*"/>

    <!--
        Deployment/copy operations that are executed when the user
        presses "Hot Deploy" or "Reload Server" within the layout
        editor. 
     -->    
    <!-- webcontent(deploy)-directory is copied by default -->
    <deploycopyinfo fromdir="${project}/webcontentbuild" todir="${projectdeploy}"/>
    <deploycopyinfo fromdir="${project}/webcontentcc" todir="${projectdeploy}" skipduringhotdeploy="true"/>
    
    <!-- ${webappui5_begin}
    <deploycopyinfo fromdir="${webappaddonsui5}" todir="${projectdeploy}"/>
    ${webappui5_end} -->
    
    <!--
        List of copy commands that are executed in addition to the normal
        webcontent-copying when deploying an application within the layout
        editor.  
     -->
    <!-- 
      <deploycopyinfo fromdir="${project}/from1" todir="c:/xxx/to1"/>
      <deploycopyinfo fromdir="${project}/from1" todir="c:/xxx/to2"/>
     -->

    <!--
      List of managed beans that are shown in the layout editor (bean browser)
      and that are available at runtime (e.g. through annotations),
      but that are not part of faces-config.xml.
     -->    
    <!--
      <additionalmanagedbean name="x" class="x"/> 
      <additionalmanagedbean name="x" class="x"/> 
    -->
     
    <!--
      List of resource files that are not part of the CaptainCasa Resource
      Management, but that should be editable within the Layout Editor's
      resource editor. 
     --> 
     <!--
       <additionalresource package="x" name="x" expressionprefix="x"/> 
       <additionalresource package="x" name="x" expressionprefix="x"/> 
     -->
      
     <!--
      Rules for the generation of code within the code generator for
      managed beans. 
     -->
     <!--
       <codegenerator memberprefix="m_" indent="4" membervisibility="private" uiclasssuffix="UI"/>
     -->
     
</project>